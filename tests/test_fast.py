from mssm.models import *
from mssm.src.python.compare import compare_CDL
import numpy as np
import os
from mssmViz.sim import*

class Test_GAM:

    dat = pd.read_csv('https://raw.githubusercontent.com/JoKra1/mssm_tutorials/main/data/GAMM/sim_dat.csv')
    
    # mssm requires that the data-type for variables used as factors is 'O'=object
    dat = dat.astype({'series': 'O',
                    'cond':'O',
                    'sub':'O',
                    'series':'O'})
    
    formula = Formula(lhs=lhs("y"), # The dependent variable - here y!
                        terms=[i(), # The intercept, a
                               f(["time"])], # The f(time) term, by default parameterized with 9 basis functions (after absorbing one for identifiability)
                        data=dat,
                        print_warn=False)
        
    model = GAMM(formula,Gaussian())

    model.fit(exclude_lambda=True)

    def test_GAMedf(self):
        assert round(self.model.edf,ndigits=3) == 9.723

    def test_GAMTermEdf(self):
        assert round(self.model.term_edf[0],ndigits=3) == 8.723
    
    def test_GAMsigma(self):
        _, sigma = self.model.get_pars()
        assert round(sigma,ndigits=3) == 1084.879
    
    def test_GAMlam(self):
        assert round(self.model.formula.penalties[0].lam,ndigits=5) == 0.0089

class Test_GAM_TE:

    dat = pd.read_csv('https://raw.githubusercontent.com/JoKra1/mssm_tutorials/main/data/GAMM/sim_dat.csv')
    
    # mssm requires that the data-type for variables used as factors is 'O'=object
    dat = dat.astype({'series': 'O',
                    'cond':'O',
                    'sub':'O',
                    'series':'O'})
    
    formula = Formula(lhs=lhs("y"), # The dependent variable - here y!
                        terms=[i(), # The intercept, a
                               l(["cond"]), # Offset for cond='b'
                               f(["time","x"],by="cond",te=True)], # one smooth surface over time and x - f(time,x) - per level of cond: three-way interaction!
                        data=dat,
                        print_warn=False)
        
    model = GAMM(formula,Gaussian())

    model.fit(exclude_lambda=True)

    def test_GAMedf(self):
        assert round(self.model.edf,ndigits=3) == 33.835 

    def test_GAMsigma(self):
        _, sigma = self.model.get_pars()
        assert round(sigma,ndigits=3) == 967.709 

    def test_GAMcoef(self):
        coef, _ = self.model.get_pars()
        assert np.allclose(coef,np.array([40.191632773107536, 12.632634815767583, 415.7650386357179, 416.79204100237587, 414.28979339554525,
                        412.74689040754254, 418.9869465923784, 424.81625071294513, 427.4762032375392, 429.4613507904337,
                        -161.9863265655713, -160.90811946589218, -169.44640443839054, -217.92710969322343, -259.2525521508211,
                        -210.30567782919363, -162.12261652659527, -151.4618951057076, -149.46032572336088, 103.1508137109787,
                        104.04175961708873, 89.04143528294188, 2.6121066056999385, -85.18428204295546, -3.2707436924230127,
                        91.85064826051322, 113.7900860870794, 116.59064046932502, -54.628125795453386, -52.319714829074805,
                        -62.22961635893447, -138.09853395051417, -235.55974652602123, -168.59016887023307, -65.29586585089108,
                        -36.69628344836647, -32.09685745932615, -17.60397127082041, -17.22457172392503, -22.736637296570603,
                        -66.63788366364597, -134.5758991964006, -104.40211016795709, -36.491284769394504, -15.296524227790913,
                        -13.082864258898482, -59.922185834115346, -56.55140367203463, -54.38848889432759, -61.81978889458799,
                        -79.31702960137237, -70.91206754158017, -47.22187697922475, -36.713971171322065, -32.69459024962733,
                        401.35234134624994, 391.2146216662694, 380.9217022541397, 369.260130246066, 355.63845545533064,
                        345.6306217394331, 338.93746489173975, 330.3237707996393, 320.3552951478837, 839.2250988924551,
                        815.2135885234942, 791.1786844985581, 767.0004054958899, 742.562171628926, 718.5382346448424,
                        694.9459848364226, 671.1341387214766, 647.1480431543426, 1277.0978083322334, 1239.202924592355,
                        1201.3076416419199, 1163.4074223217174, 1125.4853810374968, 1087.5839228554719, 1049.71487823878,
                        1011.832614809181, 973.9387939358461, 439.4984749577921, 442.0728030923027, 440.88332007287704,
                        440.7663857560454, 449.2681554223737, 457.37094047518667, 462.0656818299714, 466.0245439490735,
                        -154.69863064172318, -155.26174080612034, -165.8828827823974, -218.23454732390954, -262.2046184060907,
                        -208.65794793771042, -155.90505644568123, -142.73828395407077, -138.6370528747065, 79.76581872274448,
                        81.29453048640997, 66.0518806587191, -24.415879883123743, -116.46107810274717, -30.391535119283173,
                        67.62077048580926, 87.73801412344454, 87.64157009575679, -38.03404824145448, -33.86250233465137,
                        -42.53661173103838, -120.80800620995782, -223.07487117459615, -153.39429399607607, -44.95733017143986,
                        -13.926583171902497, -8.122748116253993, 1.707120155311954, 1.9191417569225515, -4.096345758218952,
                        -50.8011464162984, -122.56332692014111, -92.16038566456162, -26.37157677834228, -10.034711374014906,
                        -13.7467162309783, -104.68728591769779, -92.09088682691018, -80.74329512476008, -79.36019948167184,
                        -88.8494578770436, -74.96675540298408, -47.50465595327225, -34.40854046369123, -28.193321208722022,
                        28.607387479375653, 19.395615194566815, 9.994202413316255, -0.7010040990853018, -12.967478784548979,
                        -20.619721426294866, -22.095639635222778, -24.592433275684133, -28.491569947099112, 12.746007776181182,
                        22.86472624057973, 32.98502964164674, 43.066484703421004, 53.11698184120135, 63.87876597249168,
                        75.41311621534336, 86.8452487344208, 98.09609513419916, 355.88639487748685, 348.8370468397778,
                        341.7764758123139, 334.6794373808626, 327.5010972947294, 320.2681832737913, 313.02329027992425,
                        305.75680304251136, 298.4759514934192])) 

    def test_GAMlam(self):
        lam = np.array([p.lam for p in self.model.formula.penalties])
        assert np.allclose(lam,np.array([0.0009327424070583491, 0.0014689652768342682, 102489.32376553795, 48.81867707255478])) 

    def test_GAMreml(self):
        reml = self.model.get_reml()
        assert round(reml,ndigits=3) == -141942.109 

    def test_GAMllk(self):
        llk = self.model.get_llk(False)
        assert round(llk,ndigits=3) == -141872.652 

class Test_GAM_TE_BINARY:

    dat = pd.read_csv('https://raw.githubusercontent.com/JoKra1/mssm_tutorials/main/data/GAMM/sim_dat.csv')
    
    # mssm requires that the data-type for variables used as factors is 'O'=object
    dat = dat.astype({'series': 'O',
                    'cond':'O',
                    'sub':'O',
                    'series':'O'})
    
    formula = Formula(lhs=lhs("y"), # The dependent variable - here y!
                        terms=[i(), # The intercept, a
                               f(["time","x"],te=True), # one smooth surface over time and x - f(time,x) - for the reference level = cond == b
                               f(["time","x"],te=True,binary=["cond","a"])], # another smooth surface over time and x - f(time,x) - representing the difference from the other surface when cond==a
                        data=dat,
                        print_warn=False)
        
    model = GAMM(formula,Gaussian())

    model.fit(exclude_lambda=True)

    def test_GAMedf(self):
        assert round(self.model.edf,ndigits=3) == 29.845 

    def test_GAMsigma(self):
        _, sigma = self.model.get_pars()
        assert round(sigma,ndigits=3) == 967.895 

    def test_GAMcoef(self):
        coef, _ = self.model.get_pars()
        assert np.allclose(coef,np.array([52.82251019977649, 443.11341640457823, 444.8417119315177, 442.81025980578295, 441.8124532480443,
                        449.15233147591147, 456.0654049813386, 459.6018424108562, 462.4183191702384, -161.15323911424358,
                        -159.623877790315, -168.32352305206663, -219.50255970350344, -262.8874671436067, -209.74096633357095,
                        -157.34589159088728, -144.89197515466134, -141.64907622342892, 83.02517725702134, 83.61685004722325,
                        67.29419223813039, -25.06059967446428, -118.81837516724774, -31.677977965846583, 69.46809675899978,
                        92.6800417952727, 95.52231215469003, -34.46440487835692, -31.56166663527097, -41.65630493489493,
                        -121.97632332516825, -225.6291011810352, -154.72590102494797, -45.0485734036091, -14.677745638601879,
                        -9.840527238633761, 6.044688514334028, 5.104454227519869, -2.10428200739398, -50.18964225788333,
                        -123.96887428889397, -93.77297203121753, -23.898920403710566, -3.7663027508644435, -3.8432183042729093,
                        -93.29184393677372, -83.9169534222666, -75.82587234162825, -77.93818561644619, -90.79896242796625,
                        -76.42106235813338, -46.018204981476124, -29.699889228791616, -20.29203443093002, 25.480871160132605,
                        17.654931518571917, 9.661947466639308, 0.22350596663755762, -11.263452647618768, -18.84680891692399,
                        -22.706198798189927, -28.53557459722842, -35.804864747296804, 5.598623232539643, 16.914075305821147,
                        28.206633986243915, 39.35513288626826, 50.24573721343646, 61.59929302230163, 73.43778231255267,
                        85.05273662653907, 96.48241145293561, 365.7053005116908, 358.8991736633464, 352.09177909576186,
                        345.2766885459626, 338.433822164632, 331.60692609167864, 324.81094672983323, 318.00028519671633,
                        311.17714345679923, -34.38833096738923, -36.33273007631386, -38.27712953648592, -40.221533080169614,
                        -42.1659191744123, -44.11022727529732, -46.05450647906014, -47.99877694106652, -49.94304653932069,
                        -13.31962844374681, -13.900096823977188, -14.480560200724193, -15.061003287394056, -15.64092331317976,
                        -16.21949553729438, -16.79771184987033, -17.37592499463898, -17.954132345740973, 8.807826257948406,
                        8.630021087606462, 8.452202249562353, 8.27427488588766, 8.096907895156507, 7.9221186630858185,
                        7.7483570641671164, 7.574678869087, 7.401001416804583, -35.17196488842441, -34.93795813475585,
                        -34.70392260717207, -34.46992789149443, -34.236595815870864, -34.00306974349889, -33.767762565123626,
                        -33.531746609362074, -33.29568990896897, -37.50697835944442, -36.12499118124349, -34.74300148421378,
                        -33.36104240876872, -31.97930816076038, -30.597381780141696, -29.21455652105496, -27.831493374687216,
                        -26.448471664415372, 20.979119561997774, 16.330339274524295, 11.681593828356748, 7.032945462204448,
                        2.3846307938606297, -2.2626581206506287, -6.909130891082743, -11.5553914097942, -16.201600856273288,
                        312.33467407725584, 311.98661581479803, 311.63853753530424, 311.2903985817903, 310.9421588395778,
                        310.5938160460782, 310.24536220243675, 309.8968289561669, 309.54826863428946, 602.3304012658087,
                        606.2696148550797, 610.208828559826, 614.1480426121827, 618.0872573471594, 622.0264729693242,
                        625.9656893065949, 629.9049060137926, 633.8441228444658, 892.3257551261239, 900.5524841180436,
                        908.779213109995, 917.0059421020208, 925.2326710941554, 933.4594000864129, 941.6861290787813,
                        949.9128580712264, 958.1395870637045])) 

    def test_GAMlam(self):
        lam = np.array([p.lam for p in self.model.formula.penalties])
        assert np.allclose(lam,np.array([0.0014374444808858203, 648.0463543010466, 0.010548608732299658, 124150.91927590812])) 

    def test_GAMreml(self):
        reml = self.model.get_reml()
        assert round(reml,ndigits=3) == -141930.049 

    def test_GAMllk(self):
        llk = self.model.get_llk(False)
        assert round(llk,ndigits=3) == -141877.445 

class Test_GAMM:

    dat = pd.read_csv('https://raw.githubusercontent.com/JoKra1/mssm_tutorials/main/data/GAMM/sim_dat.csv')

    # mssm requires that the data-type for variables used as factors is 'O'=object
    dat = dat.astype({'series': 'O',
                    'cond':'O',
                    'sub':'O',
                    'series':'O'})
    
    formula = Formula(lhs=lhs("y"), # The dependent variable - here y!
                      terms=[i(), # The intercept, a
                               l(["cond"]), # For cond='b'
                               f(["time"],by="cond",constraint=ConstType.QR), # to-way interaction between time and cond; one smooth over time per cond level
                               f(["x"],by="cond",constraint=ConstType.QR), # to-way interaction between x and cond; one smooth over x per cond level
                               f(["time","x"],by="cond",constraint=ConstType.QR), # three-way interaction
                               fs(["time"],rf="sub")], # Random non-linear effect of time - one smooth per level of factor sub
                        data=dat,
                        print_warn=False)
        
    model = GAMM(formula,Gaussian())

    model.fit(exclude_lambda=True)

    def test_GAMedf(self):
        assert round(self.model.edf,ndigits=3) == 153.707 

    def test_GAMsigma(self):
        _, sigma = self.model.get_pars()
        assert round(sigma,ndigits=3) == 577.194 

    def test_GAMcoef(self):
        coef, _ = self.model.get_pars()
        assert np.allclose(coef,np.array([38.11511974044607, 14.262786402849988, -290.88840107824865, -169.11991817239942, -268.4179975110399,
                        -257.84146752332305, -113.36755803627112, -83.18424869731348, 123.50891612233487, 313.7320421810902,
                        500.3518659834767, -269.7732212429364, -181.4227253226421, -246.36378730865758, -219.87816197252013,
                        -127.81467782289002, -48.86498316576641, 73.40609106091279, 185.4398607353876, 422.6430051767184,
                        -6.001928273453137, -4.170379179614656, -1.132258878874888, 3.551407135749211, 5.849644965793959,
                        4.771159897042131, 4.6754870703468, 6.126221580036828, 7.957196791863589, -6.420798492217267,
                        -4.443183439669674, -1.1678128838850572, 3.8871125343862922, 6.296110386585181, 4.951200247895819,
                        4.621695844398239, 5.943703671530005, 7.672767917834845, 0.827886212319044, 0.5729418469316494,
                        0.15065916794511872, -0.5010626464149349, -0.8117114944975312, -0.6386217480252128, -0.5967007389950288,
                        -0.7677456467405138, -0.991277675560044, -0.47107296993404085, -0.32603632870040083, -0.08581946977307194,
                        0.2849934853284037, 0.4618937331672759, 0.3635413124471095, 0.3396106874635589, 0.436840660762518,
                        0.5639553166438527, -1.2561235172486682, -0.8693177871733024, -0.22859986133286034, 0.7602295715423614,
                        1.2315523093342216, 0.968982494644842, 0.9053775597113762, 1.1648485352826494, 1.5039377221987502,
                        -1.7953311684699058, -1.2424384948560623, -0.3266963327055694, 1.0866120013325669, 1.7602557281823537,
                        1.3849247166529701, 1.2940365342999365, 1.6649412637475862, 2.1496502907521555, -1.9792544591636823,
                        -1.3696962629685512, -0.3601392181065112, 1.1979537811648608, 1.9405978828766592, 1.5268181195631685,
                        1.4266192214732092, 1.8355494168176973, 2.3699584816961807, -2.371776012637024, -1.641345436361952,
                        -0.4315919036585502, 1.4354831665600465, 2.325455415754587, 1.8296803515283377, 1.7095894012170942,
                        2.1996038570034946, 2.8399936312103096, -3.0188370257181907, -2.089156211302751, -0.5493768656714152,
                        1.8270612253559684, 2.95987095884566, 2.3288900871101155, 2.1760440502218787, 2.799723823581689,
                        3.6147959425339047, -3.740842845478304, -2.5888267787373684, -0.6807903136559241, 2.2640110012129755,
                        3.667765307061619, 2.8858997979312138, 2.696510904260099, 3.469350002868931, 4.479347978463954,
                        -4.479244379026683, -3.0998399301690998, -0.8151814515251196, 2.7108906726821695, 4.391737019997218,
                        3.4555524744391324, 3.228789612857997, 4.154181374583542, 5.363540790034947, -0.09862137237002397,
                        -0.07346421545882001, -0.02495028079796371, 0.036143927583145066, 0.08092958959435136, 0.12444524773469304,
                        0.16197308163024715, 0.22479023967443057, 0.29744541071156333, 0.055758111406687294, 0.03953166533897678,
                        0.011513612392917646, -0.016899943087872897, -0.04706130365107634, -0.0735665928296478, -0.09589648070873621,
                        -0.1286293264823462, -0.16871000412648593, 0.1491684264284012, 0.10887934894485539, 0.03413503870873567,
                        -0.050345193939528986, -0.12292152565053731, -0.19433639496957567, -0.25056189642146803, -0.3417969814255573,
                        -0.45063481289896123, 0.2136134425756345, 0.15769854767633915, 0.0527734131710719, -0.07729905095265975,
                        -0.1752964213806245, -0.2713837066680305, -0.3534137936770943, -0.48787996009408713, -0.6446718922439515,
                        0.23615398102978305, 0.1767496632389254, 0.06516884472300005, -0.08871751718672093, -0.19750110504723975,
                        -0.28819760891611507, -0.3841184254601376, -0.5375033478317035, -0.7115019023167236, 0.28380811620137014,
                        0.21519752808299406, 0.08759615939213254, -0.108016337718735, -0.24467551310415922, -0.33127708248413995,
                        -0.4540473550473828, -0.6436316839561864, -0.8534779720220845, 0.3619506415214444, 0.27694559123579826,
                        0.12000378291821354, -0.13774364105860148, -0.31907339724346373, -0.4104711498308068, -0.572382827122315,
                        -0.8187047858680084, -1.0870360083746218, 0.44912743606438343, 0.345918991009366, 0.15580886542387748,
                        -0.17045459811811756, -0.4017803706657109, -0.5002062304534225, -0.704243172209116, -1.0139582914667897,
                        -1.3476306156327915, 0.5382986156896837, 0.41659353757005024, 0.19249328447543604, -0.20379504381758715,
                        -0.48636818396163495, -0.5922680626393481, -0.8388273189417832, -1.213579483291906, -1.6141651949572777,
                        0.2514550243244114, 3.1728399257040865, 3.0658063608802992, -5.871521614530863, 19.23579184993095,
                        -16.73293140422375, 5.354940373514987, -1.3692867165090052, -6.062324024728414, -23.404745235754127,
                        0.026550702317950734, -0.21072685155159313, 3.0468118400370336, -11.10762432815014, 19.237993951341576,
                        -12.871062529286103, 0.41220236077382316, -0.9379189586391201, 2.1894572876916003, 15.86438946417283,
                        -1.439895455960871, -13.321873172203208, 37.3744870404263, -50.55732953655569, -14.668427871150039,
                        -8.072286312760973, 1.5721889019216004, 2.8761371788824324, -4.2018026286686, -20.548906986595366,
                        0.2536172414010705, 8.298015661392036, 12.168243466005887, 13.86215801980132, -17.145757893653922,
                        4.332769226885868, 0.7991485060772344, 0.560420286967757, 0.6016279356207782, -0.24991704831389472,
                        -0.04426571303985668, -4.199239892877501, -11.79638858916396, -0.9990593559511257, 3.095652110211849,
                        0.924175783858156, -2.1370874025579707, -3.178367132617039, 0.08892270164889365, 3.967084100488225,
                        0.0981542421315144, -2.3498764515117014, -15.316132213869128, 9.950943766208136, -8.999253937038853,
                        12.557785812558503, 0.23295712490641993, -1.354861112782117, -3.2977163387662802, -14.35591714755181,
                        -0.7711693107003201, -8.279603414649555, 13.49010888739802, -25.70378206957301, -1.0789478838339115,
                        -10.330516363774985, -1.3304256230111036, 0.06457532183192316, -0.6974099066710138, -4.1273854763450295,
                        -0.9639725670295622, -16.216963970313547, 0.14819048871023102, -32.9240921839019, -1.4481350001288456,
                        -1.937261654117355, -2.5716418737771174, -0.31168723588812447, 1.476841401916602, 10.773232374649428,
                        -0.12082273578419779, -13.395348209966565, -38.8984102920568, -2.1762102510278605, 11.76921357877523,
                        10.96077565255643, 0.3703486322864775, -2.47881765262546, -0.5801774406750809, -4.780174949392879,
                        2.212765007796825, 16.19981716652554, -18.924816475776517, 11.721328842429585, 27.917310169622425,
                        -6.585029573174288, -0.01538672175624089, -0.630665142407026, -2.1134347104101794, -13.83663460379692,
                        0.23619318262476946, 12.899390695174178, 28.670479689651934, 12.84561580965845, -17.486102526615216,
                        6.074160494152738, -10.641308122203604, 1.6025465622210457, 0.2979435026406865, 3.105071566727262,
                        0.3194040424636191, 2.6039697590033777, -11.813955488062572, 19.539571567080436, -12.83732644790253,
                        15.479114151627934, -2.8175267428502666, 0.5673886982854004, 3.042209335137208, 2.2246844691651306,
                        -0.09218842193360198, 0.42037337194549224, 6.574056468918631, -2.9536058557266816, -1.5643785186010755,
                        0.9966816947577004, -2.3885149381528876, -1.4598142182486293, 2.4740352156104737, 9.35671581290969,
                        -0.043814160897396946, 7.532136884173022, 21.07618102654475, 3.6536606345045177, -3.8063027748751628,
                        -15.589388812045868, 5.0259028804100785, 1.60280046133127, 5.04182323996163, 19.92862298861121,
                        2.6440369667396086, 22.312428360650927, -14.84733053869323, 19.406228172063287, 16.02605235507471,
                        -9.251506034476662, 6.55346727700038, -1.631453417829572, -4.097613150753968, -15.607877267675159,
                        -3.310244684960843, -1.4842746095726478, -1.291653340916985, 48.1933890361623, 3.0335693855736454,
                        -2.5139616138153937, 4.224461055276967, -0.6733099124970575, 7.631383485656214, 28.874059584167586,
                        0.5453792540241956, 14.029477896837472, 10.194001269612768, 40.147085270082, -45.738538639403586,
                        29.53579324583171, -20.721139514792586, 7.329841842653251, 5.556037036622281, 17.6682781928719,
                        -0.025390182924002663, -0.4996634661260384, 0.11177387522999743, -2.2593110505766165, 4.892323130689108,
                        2.5845970417757393, 0.4513263468864077, -3.803175624497547, -1.8419324858313366, -0.02368578709805674,
                        -0.759354092077549, -8.092332770182297, 9.158990689557564, -20.60052290239912, 2.446451696398189,
                        -8.621460590607978, -1.3990099108676288, 2.1317242679577144, 4.327716848785671, 17.68651925184702,
                        -0.715953070751056, -15.797458589972411, -13.230260565713658, -26.85059303670872, 11.562971148682157,
                        -3.7678642801923634, 9.89840087644789, -5.2748425378080555, -7.722519834446149, -32.51341329634326])) 

    def test_GAMlam(self):
        lam = np.array([p.lam for p in self.model.formula.penalties])
        assert np.allclose(lam,np.array([0.003576343523507944, 0.006011901683446546, 5028.094352541816, 230482.43896738067, 110804.13553081625, 38451.59746745403, 381047.3436998889, 330.25972969656937, 0.11887201661809699, 2.166381231169934])) 

    def test_GAMreml(self):
        reml = self.model.get_reml()
        assert round(reml,ndigits=3) == -134726.053 

    def test_GAMllk(self):
        llk = self.model.get_llk(False)
        assert round(llk,ndigits=3) == -134263.723 


class Test_Binom_GAMM:

    Binomdat = sim3(10000,0.1,family=Binomial(),seed=20)

    formula = Formula(lhs("y"),[i(),f(["x0"]),f(["x1"]),f(["x2"]),f(["x3"])],data=Binomdat)

    # By default, the Binomial family assumes binary data and uses the logit link.
    model = GAMM(formula,Binomial())
    model.fit()

    def test_GAMedf(self):
        assert round(self.model.edf,ndigits=3) == 13.468 

    def test_GAMsigma(self):
        _, sigma = self.model.get_pars()
        assert round(sigma,ndigits=3) == 1 

    def test_GAMcoef(self):
        coef, _ = self.model.get_pars()
        assert np.allclose(coef,np.array([0.7422333451777551, -0.17195247706792302, 0.057394164386376505, 0.18704155831577263, 0.22846608870924795,
                        0.23511563352132572, 0.23707380980366774, 0.1858274828099582, 0.012619280027852899, -0.17315651504766674,
                        -0.17250023796593375, -0.094200972083248, -0.04409410888775292, 0.01921436719459457, 0.1053763860762365,
                        0.20885336302996846, 0.3163156513235213, 0.3922828489471839, 0.4674708452078455, -0.4517546540990654,
                        0.9374862846060616, 1.2394748022759206, 0.4085019434244128, 0.6450776959620124, 0.6155671421354455,
                        0.12222718933779214, -0.05160555872945563, 0.08904926741803995, 0.04897607940790038, 0.0017796804146379072,
                        -0.023979562522928297, -0.04130161353880989, -0.05541306071248854, -0.06449403279102219, -0.06700848322507941,
                        -0.05044390273197432, -0.03325208528628772])) 

    def test_GAMlam(self):
        lam = np.array([p.lam for p in self.model.formula.penalties])
        assert np.allclose(lam,np.array([122.52719452460906, 655.3557029613052, 1.3826427117149267, 2841.8313047699667])) 

    def test_GAMreml(self):
        reml = self.model.get_reml()
        assert round(reml,ndigits=3) == -6214.394 

    def test_GAMllk(self):
        llk = self.model.get_llk(False)
        assert round(llk,ndigits=3) == -6188.98 


class Test_Gamma_GAMM:

    Gammadat = sim3(500,2,family=Gamma(),seed=0)

    formula = Formula(lhs("y"),[i(),f(["x0"]),f(["x1"]),f(["x2"]),f(["x3"])],data=Gammadat)

    # By default, the Gamma family assumes that the model predictions match log(\mu_i), i.e., a log-link is used.
    model = GAMM(formula,Gamma())
    model.fit()

    def test_GAMedf(self):
        assert round(self.model.edf,ndigits=3) == 17.814 

    def test_GAMsigma(self):
        _, sigma = self.model.get_pars()
        assert round(sigma,ndigits=3) == 2.198 

    def test_GAMcoef(self):
        coef, _ = self.model.get_pars()
        assert np.allclose(coef,np.array([7.654619964489497, -0.8985855581443037, 0.00737676745266728, 0.8957095904668417, 1.5029863477484788,
                        1.4934830568869881, 0.8784847301646945, 0.2609849004219141, -0.4103254152440804, -1.1149172513050318,
                        -1.5927978049483915, -1.1489580382151177, -0.7600627541048914, -0.12495962121796242, 0.7216923726284495,
                        1.8576586195422136, 3.0961194280261264, 4.115797342436188, 5.270279060056066, -6.587035189026303,
                        5.549379799722564, 7.502355381272832, -0.0020521313276835014, 0.8329746706816913, 1.236491327346999,
                        -2.310855232645864, -3.046358383920367, 1.7885515697103103, -0.08630704882506356, 0.070517783667561,
                        0.16596005609696318, 0.18902432159809482, 0.157430338870762, 0.09725214332690277, 0.0425648394552737,
                        -0.03330475732996358, -0.12102663295792625])) 

    def test_GAMlam(self):
        lam = np.array([p.lam for p in self.model.formula.penalties])
        assert np.allclose(lam,np.array([6.772970379249816, 14.900828781781744, 0.026452879018106484, 227.86741305016199])) 

    def test_GAMreml(self):
        reml = self.model.get_reml()
        assert round(reml,ndigits=3) == -4249.165 

    def test_GAMllk(self):
        llk = self.model.get_llk(False)
        assert round(llk,ndigits=3) == -4215.695

class Test_Overlap_GAMM:
    
    # Simulate time-series based on two events that elicit responses which vary in their overlap.
    # The summed responses + a random intercept + noise is then the signal.
    overlap_dat,onsets1,onsets2 = sim7(100,1,2,seed=20)

    # Model below tries to recover the shape of the two responses + the random intercepts:
    overlap_formula = Formula(lhs("y"),[irf(["time"],onsets1,nk=15,basis_kwargs=[{"max_c":200,"min_c":0,"convolve":True}]),
                                        irf(["time"],onsets2,nk=15,basis_kwargs=[{"max_c":200,"min_c":0,"convolve":True}]),
                                        ri("factor")],
                                        data=overlap_dat,
                                        series_id="series")

    model = GAMM(overlap_formula,Gaussian())
    model.fit()

    def test_GAMedf(self):
        assert round(self.model.edf,ndigits=3) == 54.547 

    def test_GAMsigma(self):
        _, sigma = self.model.get_pars()
        assert round(sigma,ndigits=3) == 3.91 

    def test_GAMcoef(self):
        coef, _ = self.model.get_pars()
        assert np.allclose(coef,np.array([0.5414381914556667, 0.9027253840593255, 1.2394888139729652, 1.5408974325924492, 1.793282236604561,
                                        1.9605024352161622, 2.0342513059209852, 2.018245078562129, 1.9481936897353123, 1.8291845270086586,
                                        1.6414046863148892, 1.3759062972662246, 1.0473698479784739, 0.6781931660932433, 0.2896778273936524,
                                        5.018807622568596, 8.155536921854802, 9.057658829442943, 8.118583945017296, 6.009795403374646,
                                        3.4570230629826937, 2.4450369885874026, 2.417918115195418, 3.251836238689801, 3.4258032416231323,
                                        2.6532468387795594, 2.0300261093566743, 0.731209208180373, -0.5804637873111934, -0.18465710319341722,
                                        1.0285145982624768, 0.4524899052941147, 0.4005568257213123, -0.823004121469387, -0.6499737442921556,
                                        -0.8960486421242312, -1.0453212699599603, 0.17551387787392425, -0.17550250699168513, 1.71876796701693,
                                        1.0220803116075616, 0.7907656543437932, 0.18640800710629646, 0.10229679462403848, -3.032559645373398,
                                        1.243208243377598, 1.0817416861889755, -0.48123485830242374, 0.031615091580908194, 0.23411521023216836,
                                        1.4525117994309633, 0.24783178423729385, -1.2968663600345203, -2.358827075195528, -0.7007707103060459,
                                        -0.943074112905826, 0.7718437972508059, 2.2734085553443526, -0.6620713954858437, -1.3234198671472517,
                                        0.7227119874087831, -0.9365821180001762, 0.16427911329019607, -1.5908026012661671, -0.9487180564832598,
                                        1.0573347505186208, 0.999116483922564, -1.09744680946051, 0.7031765530477949, 0.799916646746684])) 

    def test_GAMlam(self):
        lam = np.array([p.lam for p in self.model.formula.penalties])
        assert np.allclose(lam,np.array([227.8068139397452, 1.8954868106567002, 3.04743103446127])) 

    def test_GAMreml(self):
        reml = self.model.get_reml()
        assert round(reml,ndigits=3) == -7346.922 

    def test_GAMllk(self):
        llk = self.model.get_llk(False)
        assert round(llk,ndigits=3) == -7232.595

class Test_ri_li:
    # Random intercept model + *li()
    sim_dat = sim4(n=500,scale=2,seed=20)

    # Specify formula 
    formula = Formula(lhs("y"),[i(),*li(["x0","x1"]),ri("x4")],data=sim_dat)

    # ... and model
    model = GAMM(formula,Gaussian())

    # then fit
    model.fit()

    def test_GAMedf(self):
        assert round(self.model.edf,ndigits=3) == 27.458 

    def test_GAMsigma(self):
        _, sigma = self.model.get_pars()
        assert round(sigma,ndigits=3) == 11.727 

    def test_GAMcoef(self):
        coef, _ = self.model.get_pars()
        assert np.allclose(coef,np.array([4.4496869070736516, 1.5961324271808035, 6.4361364571346265, -3.0591651115769993, 0.07948249536871332,
                                          -0.11501386584710335, 0.6505400484007926, 0.7096563086326143, -0.7142393186240358, 0.5593738772412031,
                                          -0.7133681425701058, 0.00984614953239883, 0.516050065109191, 1.038654222613382, 0.920317555859632,
                                          1.6827256736523348, -0.5615052428662065, -0.36418148548156637, -2.0302380548653485, 0.8057098517098714,
                                          1.3121331440612154, -0.7699578556178519, 0.09798781448952851, -0.8558991725303929, 1.1069346027406766,
                                          -0.3556611557220524, -2.35255431320692, -0.9234657845204244, -0.2705203747460906, -0.6018802984689225,
                                          0.41568172492693195, 1.8200370847180312, -1.070922758355525, -0.8231396771947899, 0.6529342195558038,
                                          -0.32948639417321524, 1.3361213113054577, -0.7414321131404542, -0.7531221916054935, 0.0800941666704564,
                                          1.3002335376265413, -0.7276918391919509, 0.2894890343822381, -0.3097228498687097])) 

    def test_GAMlam(self):
        lam = np.array([p.lam for p in self.model.formula.penalties])
        assert np.allclose(lam,np.array([7.880949768403679])) 

    def test_GAMreml(self):
        reml = self.model.get_reml()
        assert round(reml,ndigits=3) == -1340.036 

    def test_GAMllk(self):
        llk = self.model.get_llk(False)
        assert round(llk,ndigits=3) == -1311.209 