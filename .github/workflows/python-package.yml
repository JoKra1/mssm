# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
# Adapted based on: https://github.com/pypa/cibuildwheel
# https://stackoverflow.com/questions/69257912/
# and the python-package-conda.yml

name: Python package

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest,ubuntu-latest,windows-latest]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    #- name: Install build
    #  run: |
    #    python -m pip install --upgrade build

    #- name: Build wheels
    #  run: python -m build

    #- uses: actions/upload-artifact@v3
    #  with:
    #    path: ./dist/*.whl

    - name: Install cibuildwheel
      run: python -m pip install cibuildwheel==2.21.1

    - name: Build wheels
      run: python -m cibuildwheel --output-dir wheelhouse
      
    - uses: actions/upload-artifact@v4
      with:
        name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
        path: ./wheelhouse/*.whl
  
  build_sdist:
    # Build source distribution - will also be uploaded to pypi and test-pypi
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install build
        run: |
          python -m pip install build
      
      - name: Build sdist
        run: |
          python -m build --sdist
      
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz
  
  test-coverage:
    # Runs tests for one build for which coverage is computed as well
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python for Coverage
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
      - name: Test with pytest
        run: |
          pip install pytest pytest-cov mssmViz
          pytest ./tests --cov=mssm --cov-report=xml --cov-report=html
      - name: Upload coverage reports to Codecov with GitHub Action
        uses: codecov/codecov-action@v4.2.0
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        
      # Also store coverage as artifact
      - uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            coverage.xml
            ./htmlcov/index.html
        
  release:
    # https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/

    # https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables
    # Only create release if pull-target was 'stable' or work-flow was triggered on 'stable'
    # if: github.ref_name == 'stable' || github.base_ref == 'stable'
    # Changed this, because the above did not work - instead simply release on new tags.
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Necessary for creating releases apparently.

    steps:

      - name: Echo Branch
        run: echo "${{ github.ref_name }} ${{ github.base_ref }}"
      
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: ./wheelhouse/
          merge-multiple: true

      - name: Print wheel content
        run: ls ./wheelhouse
        
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --notes ""
          
      - name: Connect Artifacts to release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release upload
          '${{ github.ref_name }}' ./wheelhouse/**
          --repo '${{ github.repository }}'

  publish-test:
    # https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
    # Publish to test-pypi - only if release is triggered.
    needs:
      - release
    runs-on: ubuntu-latest

    environment:
      name: test-pypi
      url: https://test.pypi.org/p/mssm

    permissions:
      id-token: write

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: ./wheelhouse/
          merge-multiple: true
          
      - name: Publish wheels to test-pypi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: ./wheelhouse/
          repository-url: https://test.pypi.org/legacy/
  
  publish-release:
    # https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
    # Publish to pypi stable - only if release is triggered.
    needs:
      - release
    runs-on: ubuntu-latest

    environment:
      name: pypi
      url: https://pypi.org/p/mssm

    permissions:
      id-token: write

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: ./wheelhouse/
          merge-multiple: true
          
      - name: Publish wheels to test-pypi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: ./wheelhouse/
